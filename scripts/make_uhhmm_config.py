import sys, argparse
argparser = argparse.ArgumentParser('''
Generates an ini file for the UHHMM grammar induction system,
based on default values and user-supplied parameters.
''')
argparser.add_argument('-i', '--input', dest='input', action='store', default='sents.ints.txt', help='Input linetoks file')
argparser.add_argument('-o', '--output', dest='output', action='store', default='.', help='Output directory')
argparser.add_argument('-D', '--dict', dest='dict', action='store', default='sents.dict', help='Dictionary file')
argparser.add_argument('-w', '--working_dir', dest='working_dir', action='store', help='Working directory')
argparser.add_argument('-r', '--burnin', dest='burnin', action='store', default=50, help='Number of burnin iterations')
argparser.add_argument('-n', '--num_samples', dest='num_samples', action='store', default=990, help='Number of sampling iterations to perform before termination')
argparser.add_argument('-I', '--sample_iters', dest='sample_iters', action='store', default=5, help='Number of iterations between samples')
argparser.add_argument('-s', '--batch_size', dest='batch_size', action='store', help='Number of iterations between samples')
argparser.add_argument('-a', '--starta', dest='starta', action='store', default=5, help='Initial number of states in the A model')
argparser.add_argument('-b', '--startb', dest='startb', action='store', default=5, help='Initial number of states in the B model')
argparser.add_argument('-g', '--startg', dest='startg', action='store', default=10, help='Initial number of states in the G model')
argparser.add_argument('-disc', '--discount', dest='discount', action='store', default=0, help='Discount')
argparser.add_argument('-A', '--alphaa', dest='alphaa', action='store', default=0.5, help='Hyperparameter for the A model')
argparser.add_argument('-B', '--alphab', dest='alphab', action='store', default=0.5, help='Hyperparameter for the B model')
argparser.add_argument('-G', '--alphag', dest='alphag', action='store', default=0.5, help='Hyperparameter for the G model')
argparser.add_argument('-F', '--alphaf', dest='alphaf', action='store', default=1.0, help='Hyperparameter for the F model')
argparser.add_argument('-J', '--alphaj', dest='alphaj', action='store', default=1.0, help='Hyperparameter for the J model')
argparser.add_argument('-gam', '--gamma', dest='gamma', action='store', default=1.0, help='Gamma')
argparser.add_argument('-p', '--num_procs', dest='num_procs', action='store', default=10, help='Number of workers to use')
argparser.add_argument('-fin', '--finite', dest='finite', action='store_true', help='Use finite HHMM (defaults to infinite HMM)')
argparser.add_argument('-d', '--depth', dest='depth', action='store', default=1, help='Maximum store depth')
argparser.add_argument('-P', '--gpu', dest='gpu', action='store_true', help='Use GPU-ified learner (defaults to CPU only)')
argparser.add_argument('-l', '--num_gold_sents', dest='num_gold_sents', action='store', help='Number of gold PoS-tagged sentences to use (requires gold tags in the input). If all, use "-l all".')
args, unknown = argparser.parse_known_args()

print('[io]')
print('input_file=' + str(args.input))
print('output_dir=' + str(args.output))
print('dict_file=' + str(args.dict))
if args.working_dir:
    print('working_dir=' + str(args.working_dir))
print('')
print('[params]')
print('burnin=' + str(args.burnin))
print('num_samples=' + str(args.num_samples))
print('sample_iters=' + str(args.sample_iters))
if args.batch_size:
    print('batch_size=' + str(args.batch_size))
print('starta=' + str(args.starta))
print('startb=' + str(args.startb))
print('startg=' + str(args.startg))
print('discount=' + str(args.discount))
print('alphaa=' + str(args.alphaa))
print('alphab=' + str(args.alphab))
print('alphag=' + str(args.alphag))
print('alphaf=' + str(args.alphaf))
print('alphaj=' + str(args.alphaj))
print('gamma=' + str(args.gamma))
print('num_procs=' + str(args.num_procs))
print('finite=' + str(int(args.finite)))
print('depth=' + str(args.depth))
print('gpu=' + str(int(args.gpu)))
print('gpu_batch_size=1')
if args.num_gold_sents:
    print('num_gold_sents=' + str(args.num_gold_sents))
